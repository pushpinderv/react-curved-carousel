{"version":3,"sources":["components/Slider/Slider.js","App.js","serviceWorker.js","index.js"],"names":["Slider","useState","curved","setCurved","selected","setSelected","selectIndex","index","cardList","map","e","transform","className","dimmerClass","Math","pow","style","onClick","key","sliderNavDots","arr","array","marginTop","midPoints","indexLessThanMidPoints","length","every","indexGreaterThanMidPoints","midPointAverage","reduce","a","b","includes","checked","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAgHeA,EA5GA,WAAM,MAGQC,oBAAS,GAHjB,mBAGbC,EAHa,KAGLC,EAHK,OAMYF,mBAAS,GANrB,mBAMbG,EANa,KAMHC,EANG,KASdC,EAAc,SAACC,GACpBF,EAAYE,IAOTC,EAHW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAGJC,KAAI,SAACC,EAAGH,GAE/B,IAGII,EAHAC,EAAY,cACZC,EAAc,4BA+BlB,OAzBGN,IAAUH,GAEZO,EAAY,iCACZC,EAAY,uBACZC,EAAc,sBAObF,EAHMJ,EAAQH,EAEZF,EACO,gCAAiD,IAApBK,EAAQH,GAArC,eAA0DU,KAAKC,IAAI,KAAOR,EAAQH,GAAlF,4BAAgHU,KAAKC,IAAKR,EAAQH,EAAW,EAAG,KAAhJ,iCAA6K,EAAuB,GAAlBG,EAAQH,GAA1L,QAEA,gCAAiD,KAApBG,EAAQH,GAArC,wBAKPF,EACO,gCAAiD,IAApBE,EAAWG,GAAxC,eAA0DO,KAAKC,IAAI,KAAOX,EAAWG,GAArF,4BAAgHO,KAAKC,IAAKX,EAAWG,EAAQ,EAAG,KAAhJ,iCAA6K,EAAuB,GAAlBH,EAAWG,GAA7L,QAEA,gCAAiD,KAApBH,EAAWG,GAAxC,wBAIJ,yBAAKS,MAAS,CAAE,UAAcL,EAAW,KA5BrC,OA4BqDM,QAAW,kBAAIX,EAAYC,IAAQW,IAAOX,EAAOK,UAAaA,GAC5HF,EACD,yBAAKE,UAAaC,QAIhBM,EAAgBX,EAASC,KAC5B,SAACC,EAAGH,EAAOa,GACV,IAAIR,EAAS,kBAEVL,IAAUH,IACZQ,GAAwB,WAGzB,IAYgBS,EAZZC,EAAY,MAEhB,GAAGpB,EACH,CAEC,IAAIqB,EAIAC,GAHwBD,EAAvBH,EAAIK,OAAS,IAAO,EAAe,EAAEL,EAAIK,OAAO,GAAG,GACvC,CAAEL,EAAIK,OAAO,EAAK,EAAIL,EAAIK,OAAO,IAEXC,OAAM,SAAAhB,GAAC,OAAKA,EAAIH,KACnDoB,EAA4BJ,EAAUG,OAAM,SAAAhB,GAAC,OAAKA,EAAIH,KAGtDqB,GADWP,EACeE,GADCM,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAAKV,EAAMI,OAI5DF,EAAUS,SAASzB,GACrBe,EAAY,MACJE,EACRF,EAAS,UAAMR,KAAKC,IAAI,IAAMa,EAAkBrB,GAAU,EAAjD,MACDoB,IACRL,EAAS,UAAMR,KAAKC,IAAI,IAAMR,EAAQqB,GAAoB,EAAjD,OAIX,OAAO,wBAAIZ,MAAS,CAAC,UAAcM,GAAYL,QAAW,kBAAIX,EAAYC,IAC1EW,IAAOX,EAAOK,UAAaA,OAG7B,OACC,yBAAKA,UAAY,UAChB,yBAAKA,UAAY,uBAAjB,gBACA,kBAAC,IAAD,CAAQA,UAAY,sBAAsBqB,QAAS/B,EAAQgC,SAAU/B,IACrE,yBAAKS,UAAY,yBACfJ,GAEF,wBAAII,UAAY,cACXO,KC7FOgB,MATf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAY,cCIHwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6e648af8.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './Slider.css';\r\nimport Switch from 'react-ios-switch';\r\n\r\nconst Slider = () => {\r\n\r\n\t//If we want the slider curved or not\r\n\tconst [curved, setCurved] = useState(true);\r\n\r\n\t//Holds the index of selected card\r\n\tconst [selected, setSelected] = useState(0);\t\t\r\n\r\n\t//Performs actions when a card is selected\r\n\tconst selectIndex = (index) => {\r\n\t\tsetSelected(index);\r\n\t}\r\n\t\r\n\t//Dummy card data\r\n\tlet cardData = [1,2,3,4,5,6,7];\r\n\r\n\t//A function which maps the card data into a list of divs\r\n\tlet cardList = cardData.map((e, index) => {\r\n\r\n\t\tlet className = \"slider-card\";\r\n\t\tlet dimmerClass = \"slider-card-dimmer active\";\r\n\r\n\t\tlet transform;\r\n\t\tlet left = \"50%\";\r\n\r\n\t\t//If this is our selected card\r\n\t\tif(index === selected)\r\n\t\t{\r\n\t\t\ttransform = \"translate(-50%, -50%) scale(1)\"\r\n\t\t\tclassName = \"slider-card selected\"\r\n\t\t\tdimmerClass = \"slider-card-dimmer\"\r\n\t\t}\r\n\r\n\t\t//The cards to the right of the selected card\r\n\t\telse if(index > selected)\r\n\t\t{\r\n\t\t\tif(curved)\r\n\t\t\t\ttransform = `translate(calc(-50% + ${(index - selected) * 84}% - ${Math.pow(1.51, (index - selected))}px), calc(-53% + ${Math.pow((index - selected + 1),2.4)}%)) scale(0.8) rotate(${0 + (index - selected)*6}deg)`\r\n\t\t\telse\r\n\t\t\t\ttransform = `translate(calc(-50% + ${(index - selected) * 100}%), -50%) scale(0.8)`\r\n\t\t}\r\n\r\n\t\t//The cards to the left of the selected card\r\n\t\telse{\r\n\t\t\tif(curved)\r\n\t\t\t\ttransform = `translate(calc(-50% - ${(selected - index) * 84}% + ${Math.pow(1.51, (selected - index))}px), calc(-53% + ${Math.pow((selected - index + 1),2.4)}%)) scale(0.8) rotate(${0 - (selected - index)*6}deg)`\r\n\t\t\telse\r\n\t\t\t\ttransform = `translate(calc(-50% - ${(selected - index) * 100}%), -50%) scale(0.8)`\r\n\t\t}\r\n\t\t\t\r\n\t\t//Final card with all the styles applied\r\n\t\treturn <div style = {{ \"transform\" : transform, \"left\" : left}} onClick = {()=>selectIndex(index)} key = {index} className = {className} >\r\n\t\t\t{e}\r\n\t\t\t<div className = {dimmerClass} />\r\n\t</div>});\r\n\r\n\t//A function which generates the slider selection dots and adds curve based on top-margin\r\n\tlet sliderNavDots = cardList.map(\r\n\t\t(e, index, arr) =>{\r\n\t\t\tlet className = `slider-nav-item`\r\n\r\n\t\t\tif(index === selected)\r\n\t\t\t\tclassName = className + ' active';\r\n\r\n\t\t\t//The top margin responsible for curving list points\r\n\t\t\tlet marginTop = '0px';\r\n\t\t\t\r\n\t\t\tif(curved)\r\n\t\t\t{\r\n\t\t\t\t//Mid point index (We find this because the middle dot will be the center of the curve)\r\n\t\t\t\tlet midPoints;\r\n\t\t\t\tif ((arr.length % 2) === 1) midPoints = [(arr.length-1)/2]\r\n\t\t\t\telse midPoints = [(arr.length/2) - 1, (arr.length/2)]\r\n\r\n\t\t\t\tlet indexLessThanMidPoints = midPoints.every(e => (e > index));\t\r\n\t\t\t\tlet indexGreaterThanMidPoints = midPoints.every(e => (e < index));\r\n\r\n\t\t\t\tlet average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n\t\t\t\tlet midPointAverage = average(midPoints);\r\n\r\n\t\t\t\t//Decide top margin based on distance from the center to generate curve\r\n\t\t\t\tif(midPoints.includes(index)) \r\n\t\t\t\t\tmarginTop = '0px';\r\n\t\t\t\telse if (indexLessThanMidPoints)\r\n\t\t\t\t\tmarginTop = `${Math.pow(2.8, (midPointAverage - index)) - 1}px`;\r\n\t\t\t\telse if (indexGreaterThanMidPoints)\r\n\t\t\t\t\tmarginTop = `${Math.pow(2.8, (index - midPointAverage)) - 1}px`;\r\n\t\t\t}\r\n\r\n\t\t\t//Final selection dot with all the styles applied\r\n\t\t\treturn <li style = {{\"marginTop\" : marginTop}} onClick = {()=>selectIndex(index)} \r\n\t\t\tkey = {index} className = {className} />\r\n\t\t})\t\t\r\n\t\r\n\treturn (\r\n\t\t<div className = \"slider\">\r\n\t\t\t<div className = \"slider-curved-label\">Toggle Curve</div>\r\n\t\t\t<Switch className = \"slider-curve-toggle\" checked={curved} onChange={setCurved}/>\r\n\t\t\t<div className = \"slider-card-container\">\r\n\t\t\t\t{cardList}\r\n\t\t\t</div>\r\n\t\t\t<ul className = \"slider-nav\">\r\n\t\t\t    {sliderNavDots}\r\n\t    \t</ul>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Slider;","import React from 'react';\nimport './App.css';\nimport Slider from './components/Slider/Slider';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Slider />\n      <div className = \"overlay\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}